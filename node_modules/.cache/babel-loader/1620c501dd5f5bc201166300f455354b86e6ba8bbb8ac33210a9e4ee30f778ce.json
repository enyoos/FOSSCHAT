{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ilyas\\\\programming\\\\my-app-chat\\\\src\\\\components\\\\ChatRoom.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { EVENTS, socket } from \"../socket\";\nimport { useSearchParams } from \"react-router-dom\";\nimport ChatLog from \"./ChatLog\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function ChatRoom({\n  messages,\n  username,\n  navigate,\n  setMessages,\n  id,\n  setId\n}) {\n  _s();\n  const [connected, setConnected] = useState(false);\n  const [value, setValue] = useState(\"\");\n  function handleSubmit(e) {\n    e.preventDefault();\n    let newId = id++;\n    setId(newId);\n    let msg = value.trim();\n    setValue(\"\");\n    setMessages(message => [...message, msg]);\n    socket.emit(EVENTS[\"SEND_MESSAGE\"], msg);\n  }\n  useEffect(() => {\n    socket.connect();\n    function onConnect() {\n      setConnected(true);\n    }\n    function onSendMessageEvent(value) {\n      console.log(\"SEND_MSG with the msg : \" + value);\n      setMessages(prevMsgs => [...prevMsgs, value]);\n    }\n    socket.on('connect', onConnect);\n    socket.on(EVENTS[\"SEND_MESSAGE\"], onSendMessageEvent);\n    return () => {\n      socket.off(EVENTS[\"SEND_MESSAGE\"]);\n      socket.off('connect', onConnect);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [connected ? /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" you're now connected \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 26\n    }, this) : /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \" Connecting ...  \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 64\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Welcome, \", username]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        value: value,\n        type: \"text\",\n        onChange: e => setValue(e.target.value),\n        placeholder: \"What do you want to say\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ChatLog, {\n      messages: messages,\n      setMessages: setMessages,\n      id: id,\n      setId: setId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n_s(ChatRoom, \"ZBwdoaCQdEFY82sk0aCL0pMl1As=\");\n_c = ChatRoom;\nvar _c;\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["useEffect","useState","EVENTS","socket","useSearchParams","ChatLog","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatRoom","messages","username","navigate","setMessages","id","setId","_s","connected","setConnected","value","setValue","handleSubmit","e","preventDefault","newId","msg","trim","message","emit","connect","onConnect","onSendMessageEvent","console","log","prevMsgs","on","off","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","onChange","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/ilyas/programming/my-app-chat/src/components/ChatRoom.js"],"sourcesContent":["import { useEffect, useState } from \"react\"\r\nimport { EVENTS, socket } from \"../socket\";\r\nimport { useSearchParams } from \"react-router-dom\";\r\nimport ChatLog from \"./ChatLog\";\r\n\r\nexport default function ChatRoom ( {messages, username, navigate, setMessages, id, setId} )\r\n{\r\n    const [connected, setConnected] = useState( false );\r\n    const [value, setValue] = useState(\"\");\r\n\r\n    function handleSubmit( e )\r\n    {\r\n        e.preventDefault();\r\n        let newId = id ++;\r\n        setId ( newId);\r\n        let msg = value.trim();\r\n        setValue ( \"\" );\r\n        setMessages( message => [...message, msg])\r\n        socket.emit( EVENTS[\"SEND_MESSAGE\"] , msg);\r\n    }\r\n\r\n    useEffect( () => {\r\n        socket.connect();\r\n\r\n        function onConnect () { setConnected( true ); }\r\n        function onSendMessageEvent( value ) {\r\n            console.log ( \"SEND_MSG with the msg : \" + value )\r\n            setMessages( prevMsgs => [...prevMsgs, value ]); \r\n        }\r\n\r\n        socket.on('connect', onConnect);\r\n        socket.on( EVENTS[\"SEND_MESSAGE\"], onSendMessageEvent);\r\n\r\n        return() => {\r\n            socket.off ( EVENTS[\"SEND_MESSAGE\"] );\r\n            socket.off ( 'connect', onConnect );\r\n        }\r\n    }, []);\r\n\r\n    return ( \r\n        <>\r\n            {connected ? <span> you're now connected </span> : <span> Connecting ...  </span> }\r\n            <h1>\r\n                Welcome, {username}\r\n            </h1>\r\n            <form onSubmit={handleSubmit}>\r\n                <input value={value} type=\"text\" onChange={e => setValue(e.target.value)} placeholder=\"What do you want to say\"/>\r\n                <input type=\"submit\" value={\"OK\"}/>\r\n            </form>\r\n            <ChatLog messages={messages} setMessages={setMessages} id={id} setId={setId} />\r\n        </>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}